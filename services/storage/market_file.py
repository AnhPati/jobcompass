from pathlib import Path
import os

from config.settings import (
    get_market_offers_local_file,
    get_market_offers_remote_path,
)
from services.storage.supabase_storage_service import (
    file_exists_in_storage,
    upload_csv_to_storage,
    download_csv_from_storage,
)

def ensure_market_file_exists(user_id: str) -> None:
    """
    Logique de synchronisation intelligente :
    - Fichier local existe ‚Üí Le conserver (priorit√© au local)
    - Fichier local absent + cloud existe ‚Üí R√©cup√©rer du cloud
    - Aucun fichier ‚Üí Cr√©er nouveau
    """
    # D√©termination des chemins
    local_path = Path(get_market_offers_local_file(user_id))  # Ex: data/tmp/user_123_markets.csv
    remote_path = get_market_offers_remote_path(user_id)      # Ex: 123/markets.csv

    # ‚úÖ PRIORIT√â 1 : Si fichier local existe, le conserver
    if local_path.exists():
        print(f"‚úÖ Fichier local trouv√© : {local_path.name} (conservation)")
        return
    
    # ‚úÖ PRIORIT√â 2 : Fichier local absent, v√©rifier le cloud
    print(f"üìÇ Fichier local absent, v√©rification cloud...")
    
    try:
        cloud_file_exists = file_exists_in_storage(user_id)
        
        if cloud_file_exists:
            # ‚úÖ Cloud existe, local absent ‚Üí R√©cup√©rer
            print(f"üì• R√©cup√©ration depuis le cloud...")
            file_content = download_csv_from_storage(remote_path)
            
            if file_content:
                local_path.parent.mkdir(parents=True, exist_ok=True)
                with open(local_path, 'wb') as f:
                    f.write(file_content)
                print(f"‚úÖ Fichier restaur√© depuis le cloud : {len(file_content)} bytes")
            else:
                print(f"‚ùå √âchec t√©l√©chargement, cr√©ation fichier vide")
                _create_empty_local_file(local_path)
        else:
            # ‚úÖ Aucun fichier nulle part ‚Üí Cr√©er nouveau
            print(f"üìÇ Aucun fichier trouv√©, cr√©ation...")
            _create_empty_local_file(local_path)
            
            # Essayer de sauvegarder sur le cloud (non bloquant)
            try:
                upload_csv_to_storage(str(local_path), remote_path)
                print(f"‚úÖ Nouveau fichier sauvegard√© sur le cloud")
            except Exception as e:
                print(f"‚ö†Ô∏è Nouveau fichier cr√©√© localement seulement : {e}")
                
    except Exception as e:
        # ‚úÖ Fallback : Assurer qu'un fichier local existe
        print(f"‚ö†Ô∏è Erreur cloud, cr√©ation fichier local : {e}")
        _create_empty_local_file(local_path)

def _create_empty_local_file(local_path: Path):
    """Cr√©e un fichier CSV vide avec les bonnes colonnes"""
    local_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Headers selon votre sch√©ma
    headers = "title,company,location,date,type,market,skills_main,skills_secondary,techs_main,techs_secondary,tjm,seniority,rhythm,sector,number_of_offers,notes\n"
    
    local_path.write_text(headers, encoding="utf-8")
    print(f"‚úÖ Fichier local cr√©√© : {local_path.name}")

def force_sync_cloud_to_local(user_id: str) -> bool:
    """
    Force la synchronisation cloud ‚Üí local (SEULEMENT pour d√©pannage manuel)
    """
    try:
        local_path = Path(get_market_offers_local_file(user_id))
        remote_path = get_market_offers_remote_path(user_id)
        
        print(f"üîÑ Force sync cloud ‚Üí local (Manuel)...")
        
        file_content = download_csv_from_storage(remote_path)
        if file_content:
            # ‚úÖ Backup du fichier local si il existe
            if local_path.exists():
                backup_path = local_path.with_suffix('.backup')
                local_path.rename(backup_path)
                print(f"üì¶ Backup local cr√©√© : {backup_path.name}")
            
            local_path.parent.mkdir(parents=True, exist_ok=True)
            with open(local_path, 'wb') as f:
                f.write(file_content)
            print(f"‚úÖ Force sync r√©ussie : {len(file_content)} bytes")
            return True
        else:
            print(f"‚ùå Force sync √©chou√©e - aucun fichier cloud")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur force sync : {e}")
        return False

def force_sync_local_to_cloud(user_id: str) -> bool:
    """
    Force la synchronisation local ‚Üí cloud (pour sauvegarde manuelle)
    """
    try:
        local_path = Path(get_market_offers_local_file(user_id))
        remote_path = get_market_offers_remote_path(user_id)
        
        if not local_path.exists():
            print(f"‚ùå Aucun fichier local √† sauvegarder")
            return False
            
        print(f"üîÑ Force sync local ‚Üí cloud (Manuel)...")
        
        success = upload_csv_to_storage(str(local_path), remote_path)
        if success:
            print(f"‚úÖ Force sync r√©ussie vers le cloud")
            return True
        else:
            print(f"‚ùå Force sync √©chou√©e vers le cloud")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur force sync : {e}")
        return False